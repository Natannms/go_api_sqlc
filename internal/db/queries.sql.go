// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createInstrument = `-- name: CreateInstrument :exec
INSERT INTO instrument (user_id, is_active, instrument_name)
VALUES (?, ?, ?)
`

type CreateInstrumentParams struct {
	UserID         int32
	IsActive       sql.NullBool
	InstrumentName sql.NullString
}

func (q *Queries) CreateInstrument(ctx context.Context, arg CreateInstrumentParams) error {
	_, err := q.db.ExecContext(ctx, createInstrument, arg.UserID, arg.IsActive, arg.InstrumentName)
	return err
}

const createInvite = `-- name: CreateInvite :exec
INSERT INTO invites (user_id, remittee, status, invite_type)
VALUES (?, ?, ?, ?)
`

type CreateInviteParams struct {
	UserID     int32
	Remittee   sql.NullString
	Status     sql.NullString
	InviteType sql.NullString
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) error {
	_, err := q.db.ExecContext(ctx, createInvite,
		arg.UserID,
		arg.Remittee,
		arg.Status,
		arg.InviteType,
	)
	return err
}

const createMetadata = `-- name: CreateMetadata :exec
INSERT INTO metadata (user_id, user_type, photo, description, status, address)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateMetadataParams struct {
	UserID      int32
	UserType    sql.NullString
	Photo       sql.NullString
	Description sql.NullString
	Status      sql.NullString
	Address     sql.NullString
}

func (q *Queries) CreateMetadata(ctx context.Context, arg CreateMetadataParams) error {
	_, err := q.db.ExecContext(ctx, createMetadata,
		arg.UserID,
		arg.UserType,
		arg.Photo,
		arg.Description,
		arg.Status,
		arg.Address,
	)
	return err
}

const createSolicitation = `-- name: CreateSolicitation :exec
INSERT INTO solicitation (user_id, remittee, status, invite_type)
VALUES (?, ?, ?, ?)
`

type CreateSolicitationParams struct {
	UserID     int32
	Remittee   sql.NullString
	Status     sql.NullString
	InviteType sql.NullString
}

func (q *Queries) CreateSolicitation(ctx context.Context, arg CreateSolicitationParams) error {
	_, err := q.db.ExecContext(ctx, createSolicitation,
		arg.UserID,
		arg.Remittee,
		arg.Status,
		arg.InviteType,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, password) VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	return err
}

const deleteInstrumentByUserId = `-- name: DeleteInstrumentByUserId :exec
DELETE FROM instrument WHERE user_id = ?
`

func (q *Queries) DeleteInstrumentByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteInstrumentByUserId, userID)
	return err
}

const deleteInviteByUserId = `-- name: DeleteInviteByUserId :exec
DELETE FROM invites WHERE user_id = ?
`

func (q *Queries) DeleteInviteByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteInviteByUserId, userID)
	return err
}

const deleteMetadata = `-- name: DeleteMetadata :exec
DELETE FROM metadata WHERE id = ?
`

func (q *Queries) DeleteMetadata(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMetadata, id)
	return err
}

const deleteRepertoire = `-- name: DeleteRepertoire :exec
DELETE FROM repertoire WHERE user_id = ?
`

func (q *Queries) DeleteRepertoire(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRepertoire, userID)
	return err
}

const deleteSolicitationByUserId = `-- name: DeleteSolicitationByUserId :exec
DELETE FROM solicitation WHERE user_id = ?
`

func (q *Queries) DeleteSolicitationByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSolicitationByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, name)
	return err
}

const getAllInstruments = `-- name: GetAllInstruments :many
SELECT id, user_id, is_active, instrument_name FROM instrument
`

func (q *Queries) GetAllInstruments(ctx context.Context) ([]Instrument, error) {
	rows, err := q.db.QueryContext(ctx, getAllInstruments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Instrument
	for rows.Next() {
		var i Instrument
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IsActive,
			&i.InstrumentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllInvites = `-- name: GetAllInvites :many
SELECT id, user_id, remittee, status, invite_type FROM invites
`

func (q *Queries) GetAllInvites(ctx context.Context) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Remittee,
			&i.Status,
			&i.InviteType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSolicitations = `-- name: GetAllSolicitations :many
SELECT id, user_id, remittee, status, invite_type FROM solicitation
`

func (q *Queries) GetAllSolicitations(ctx context.Context) ([]Solicitation, error) {
	rows, err := q.db.QueryContext(ctx, getAllSolicitations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Solicitation
	for rows.Next() {
		var i Solicitation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Remittee,
			&i.Status,
			&i.InviteType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstrumentByUserId = `-- name: GetInstrumentByUserId :one
SELECT id, user_id, is_active, instrument_name FROM instrument WHERE user_id = ?
`

func (q *Queries) GetInstrumentByUserId(ctx context.Context, userID int32) (Instrument, error) {
	row := q.db.QueryRowContext(ctx, getInstrumentByUserId, userID)
	var i Instrument
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsActive,
		&i.InstrumentName,
	)
	return i, err
}

const getInviteByUserId = `-- name: GetInviteByUserId :one
SELECT id, user_id, remittee, status, invite_type FROM invites WHERE user_id = ?
`

func (q *Queries) GetInviteByUserId(ctx context.Context, userID int32) (Invite, error) {
	row := q.db.QueryRowContext(ctx, getInviteByUserId, userID)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Remittee,
		&i.Status,
		&i.InviteType,
	)
	return i, err
}

const getMetadata = `-- name: GetMetadata :many
SELECT id, user_id, user_type, photo, description, status, address FROM metadata
`

func (q *Queries) GetMetadata(ctx context.Context) ([]Metadatum, error) {
	rows, err := q.db.QueryContext(ctx, getMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserType,
			&i.Photo,
			&i.Description,
			&i.Status,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetadataById = `-- name: GetMetadataById :one
SELECT id, user_id, user_type, photo, description, status, address FROM metadata WHERE id = ?
`

func (q *Queries) GetMetadataById(ctx context.Context, id int32) (Metadatum, error) {
	row := q.db.QueryRowContext(ctx, getMetadataById, id)
	var i Metadatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserType,
		&i.Photo,
		&i.Description,
		&i.Status,
		&i.Address,
	)
	return i, err
}

const getSolicitationByUserId = `-- name: GetSolicitationByUserId :one
SELECT id, user_id, remittee, status, invite_type FROM solicitation WHERE user_id = ?
`

func (q *Queries) GetSolicitationByUserId(ctx context.Context, userID int32) (Solicitation, error) {
	row := q.db.QueryRowContext(ctx, getSolicitationByUserId, userID)
	var i Solicitation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Remittee,
		&i.Status,
		&i.InviteType,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRepertoire = `-- name: InsertRepertoire :exec
INSERT INTO repertoire (user_id, name, is_active, music_list_id)
VALUES (?, ?, ?, ?)
`

type InsertRepertoireParams struct {
	UserID      int32
	Name        sql.NullString
	IsActive    sql.NullBool
	MusicListID sql.NullInt32
}

func (q *Queries) InsertRepertoire(ctx context.Context, arg InsertRepertoireParams) error {
	_, err := q.db.ExecContext(ctx, insertRepertoire,
		arg.UserID,
		arg.Name,
		arg.IsActive,
		arg.MusicListID,
	)
	return err
}

const selectAllRepertoire = `-- name: SelectAllRepertoire :many
SELECT id, user_id, name, is_active, music_list_id FROM repertoire
`

func (q *Queries) SelectAllRepertoire(ctx context.Context) ([]Repertoire, error) {
	rows, err := q.db.QueryContext(ctx, selectAllRepertoire)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repertoire
	for rows.Next() {
		var i Repertoire
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.IsActive,
			&i.MusicListID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRepertoireById = `-- name: SelectRepertoireById :one
SELECT id, user_id, name, is_active, music_list_id FROM repertoire WHERE user_id = ?
`

func (q *Queries) SelectRepertoireById(ctx context.Context, userID int32) (Repertoire, error) {
	row := q.db.QueryRowContext(ctx, selectRepertoireById, userID)
	var i Repertoire
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.IsActive,
		&i.MusicListID,
	)
	return i, err
}

const updateInstrumentByUserId = `-- name: UpdateInstrumentByUserId :exec
UPDATE instrument SET is_active = ?, instrument_name = ? WHERE user_id = ?
`

type UpdateInstrumentByUserIdParams struct {
	IsActive       sql.NullBool
	InstrumentName sql.NullString
	UserID         int32
}

func (q *Queries) UpdateInstrumentByUserId(ctx context.Context, arg UpdateInstrumentByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateInstrumentByUserId, arg.IsActive, arg.InstrumentName, arg.UserID)
	return err
}

const updateInviteByUserId = `-- name: UpdateInviteByUserId :exec
UPDATE invites SET remittee = ?, status = ?, invite_type = ? WHERE user_id = ?
`

type UpdateInviteByUserIdParams struct {
	Remittee   sql.NullString
	Status     sql.NullString
	InviteType sql.NullString
	UserID     int32
}

func (q *Queries) UpdateInviteByUserId(ctx context.Context, arg UpdateInviteByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateInviteByUserId,
		arg.Remittee,
		arg.Status,
		arg.InviteType,
		arg.UserID,
	)
	return err
}

const updateMetadata = `-- name: UpdateMetadata :exec
UPDATE metadata SET user_id = ?, user_type = ?, photo = ?, description = ?, status = ?, address = ? WHERE id = ?
`

type UpdateMetadataParams struct {
	UserID      int32
	UserType    sql.NullString
	Photo       sql.NullString
	Description sql.NullString
	Status      sql.NullString
	Address     sql.NullString
	ID          int32
}

func (q *Queries) UpdateMetadata(ctx context.Context, arg UpdateMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updateMetadata,
		arg.UserID,
		arg.UserType,
		arg.Photo,
		arg.Description,
		arg.Status,
		arg.Address,
		arg.ID,
	)
	return err
}

const updateRepertoire = `-- name: UpdateRepertoire :exec
UPDATE repertoire
SET name = ?, is_active = ?, music_list_id = ?
WHERE user_id = ?
`

type UpdateRepertoireParams struct {
	Name        sql.NullString
	IsActive    sql.NullBool
	MusicListID sql.NullInt32
	UserID      int32
}

func (q *Queries) UpdateRepertoire(ctx context.Context, arg UpdateRepertoireParams) error {
	_, err := q.db.ExecContext(ctx, updateRepertoire,
		arg.Name,
		arg.IsActive,
		arg.MusicListID,
		arg.UserID,
	)
	return err
}

const updateSolicitationByUserId = `-- name: UpdateSolicitationByUserId :exec
UPDATE solicitation SET remittee = ?, status = ?, invite_type = ? WHERE user_id = ?
`

type UpdateSolicitationByUserIdParams struct {
	Remittee   sql.NullString
	Status     sql.NullString
	InviteType sql.NullString
	UserID     int32
}

func (q *Queries) UpdateSolicitationByUserId(ctx context.Context, arg UpdateSolicitationByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateSolicitationByUserId,
		arg.Remittee,
		arg.Status,
		arg.InviteType,
		arg.UserID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = ?, password = ? WHERE name = ?
`

type UpdateUserParams struct {
	Email    string
	Password string
	Name     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.Password, arg.Name)
	return err
}
